{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","useState","setRobots","searchfield","setSearchfield","count","setCount","useEffect","fetch","then","response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"wLAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,qCACC,6BAAKL,IACL,4BAAIC,WCYOK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACE,oCACDA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,cAAC,EAAD,CAEDR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,UCMOC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,qBAAKV,UAAU,MAAf,SACC,uBACCA,UAAU,0CACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCCI,EARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEJ,EAAMK,YCiCKC,MAjCf,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACNlB,EADM,KACCmB,EADD,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,OAGaH,mBAAS,GAHtB,mBAGNI,EAHM,KAGCC,EAHD,KAKZC,qBAAU,WACTC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAUV,EAAUU,MAC1BC,QAAQC,IAAIT,KACZ,CAACA,IAEH,IAIMU,EAAiBhC,EAAOiC,QAAO,SAAAC,GACrC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAShB,EAAYe,kBAErD,OAAQnC,EAAOqC,OAGhB,sBAAKzC,UAAU,KAAf,UACE,6CACA,wBAAQ0C,QAAS,kBAAMf,EAASD,EAAM,IAAtC,sBACA,cAAC,EAAD,CAAWhB,aAbW,SAACiC,GACvBlB,EAAekB,EAAMC,OAAOC,UAa5B,cAAC,EAAD,UACC,cAAC,EAAD,CAAUzC,OAAQgC,SAPjB,oBAAIpC,UAAU,KAAd,2B,MCnBN8C,IAASC,OACR,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.893b4780.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-3\">\r\n\t\t\t<img src={`https://robohash.org/${id}?100x100`} alt=\"robot\"/>\r\n\t\t\t<>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t  <div> {\r\n\t\trobots.map((user, i) => {\r\n\t\t return (\r\n\t\t  <Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}\r\n\t\t  />\r\n\t\t);\r\n\t  })\r\n\t}\r\n\t</div>);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\t\tclassName=\"tc pa2 br3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"search robots\"\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => { \r\n\treturn (\r\n\t\t<div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { useState, useEffect } from 'react'; \r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n\r\nfunction App (){ \r\n\t const [robots,setRobots] = useState([]);\r\n\t const [searchfield, setSearchfield] = useState('');\r\n\t const [count, setCount] = useState(0);\r\n\r\n\t  useEffect(() => {\r\n\t  \tfetch('https://jsonplaceholder.typicode.com/users') \r\n\t  \t\t.then(response => response.json()) \r\n\t  \t\t.then(users => {setRobots(users)})\r\n\t  \t\tconsole.log(count)\r\n\t  },[count]) // only run if count changes. if [] empty, runs only once on App function loading\r\n\t  \r\n\t  const onSearchChange = (event) => {  \r\n\t  \tsetSearchfield(event.target.value); \r\n\t  }\r\n\r\n\t  const filteredRobots = robots.filter(robot => {\r\n\t \treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n \t  })\r\n  \treturn !robots.length \r\n  \t\t?\t<h1 className=\"tc\"> Loading... </h1>\r\n  \t  : (\r\n\t\t<div className=\"tc\">\r\n\t\t\t\t<h1>ROBOFRIENDS</h1>\r\n\t\t\t\t<button onClick={() => setCount(count+1)}>click me</button>\t\t\t\t\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>  \r\n\t\t\t\t</Scroll>\r\n\t\t</div>\r\n\t      );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n\t<App />,\r\n\tdocument.getElementById('root'));\r\n"],"sourceRoot":""}