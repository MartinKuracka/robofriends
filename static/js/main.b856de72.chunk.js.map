{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById"],"mappings":"6MAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,qCACC,6BAAKL,IACL,4BAAIC,WCYOK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACE,oCACDA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,cAAC,EAAD,CAEDR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,UCOOC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,qBAAKV,UAAU,MAAf,SACC,uBACCA,UAAU,0CACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCACI,EARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEJ,EAAMK,YC6CKC,E,kDA1CZ,aAAe,IAAD,8BACb,gBAcDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAdzC,EAAKC,MAAQ,CACfvB,OAAQ,GACRK,YAAa,IAJE,E,gEAQO,IAAD,OACnBmB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKR,SAAS,CAACpB,OAAQ4B,S,+BAS/B,IAAD,OAEFC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAC/C,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS,EAAKX,MAAMlB,YAAY4B,kBAE9D,OAAiC,IAA7BH,KAAKP,MAAMvB,OAAOmC,OACd,oBAAIvC,UAAU,KAAd,uBAGZ,sBAAKA,UAAU,KAAf,UACC,6CACA,cAAC,EAAD,CAAWU,aAAcwB,KAAKZ,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,CAAUlB,OAAQ6B,a,GAlCLO,a,MCDlBC,IAASC,OACR,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b856de72.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-3\">\r\n\t\t\t<img src={`https://robohash.org/${id}?100x100`} alt=\"robot\"/>\r\n\t\t\t<>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t  <div> {\r\n\t\trobots.map((user, i) => {\r\n\t\t return (\r\n\t\t  <Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}\r\n\t\t  />\r\n\t\t);\r\n\t  })\r\n\t}\r\n\t</div>);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n// we have two props here to be used in the parent App {searchField, searchChange}.\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\t\tclassName=\"tc pa2 br3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"search robots\"\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => { \r\n\treturn (\r\n\t\t<div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n\r\n// this is reusable component, I can now use it anywher on the Website to make content scroll. Like this we make reusable components, with chidren as well.\r\n","import React, { Component } from 'react'; // if I put Component here, I dont have to use it in the Class statement below - shortening the code\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n// import {robots} from './robots'; // imports array like his to the component, not used anymore since we fetch from the internet\r\n\r\n\r\nclass App extends Component { // React. has been ommited because it is included above in the import statement\r\n\t  constructor() {\r\n\t  \tsuper()        // needs to be included in order to use parents properties in this class - takes them from robots and Card, whatever is defined in imports\r\n\t  \tthis.state = { // in order to use state in the App below, i need to create state with values that will change - state can change, so we need it in order to accept changing values from searchfield\r\n\t\trobots: [], // state lives in the parent components and passess the state to different components\r\n\t\tsearchField: ''  // thes 2 props are from SearchBox.js file imported to App by super()\r\n\t    }\r\n\t  }\r\n\r\n\t  componentDidMount() {\r\n\t  \tfetch('https://jsonplaceholder.typicode.com/users')  // fetches file from the server\r\n\t  \t\t.then(response => response.json()) // this is what we get from fetch - response - and need to convert it to readable format by using json()\r\n\t  \t\t.then(users => {this.setState({robots: users})})\r\n\t  }\r\n\t  // now we need new function that will read the changes in the searchBox\r\n\t  // when declaring new method (onSearchChange), always use arrow function, not like original constructor method\r\n\t  onSearchChange = (event) => {  // everytime the searchbox changes we get an event, hence event property in the commas\r\n\t  \tthis.setState({searchField: event.target.value}); // we need events value to change the searchfield state - target.value syntax always used for values and setState to change the state (remember this!!!)- to get its value\r\n\t  }\r\n\r\n\t  // now I changed {robots} in Cardlist component for this.state.robots cause I am using robots from state, not from components directly\r\n\t  render() {\r\n\t  \t// const {robots, searchfield} = this.state; //just a function for cleaning the code to replace this.state to be written every time we need it below\r\n\t  \tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t  \t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n  \t    })\r\n  \t    if (this.state.robots.length === 0) {\t\t// shortened function would be if (!state.robots) to clean the code - shows loading bar if the array is empty\r\n  \t    \treturn <h1 className=\"tc\"> Loading </h1>\r\n  \t    } else {  // if its not empty, returns the robots cards\r\n\t      return (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1>ROBOFRIENDS</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>  \r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t      );\r\n\t    }\r\n      }\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n\t<App />,\r\n\tdocument.getElementById('root'));\r\n"],"sourceRoot":""}